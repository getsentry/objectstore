#!/usr/bin/env bash

# Read expected Python version from .python-version file
EXPECTED_VERSION=$(cat .python-version 2>/dev/null || echo "3.11.2")

# Check if pyenv is available and install the correct version if needed
if command -v pyenv >/dev/null 2>&1; then
    if ! pyenv versions --bare | grep -q "^${EXPECTED_VERSION}$"; then
        echo "Installing Python ${EXPECTED_VERSION} using pyenv..."
        pyenv install ${EXPECTED_VERSION}
    fi
fi

PYTHON_VERSION=$(python3 --version 2>&1 | cut -d' ' -f2)
if [[ ! "$PYTHON_VERSION" == "$EXPECTED_VERSION"* ]]; then
    echo "Warning: Expected Python $EXPECTED_VERSION, but found $PYTHON_VERSION"
    echo "Ensure pyenv is installed and the .python-version file is respected"
fi

# Create virtual environment if it doesn't exist
if [[ ! -d .venv ]]; then
    echo "Creating Python virtual environment in .venv..."
    python3 -m venv .venv
    echo "Virtual environment created successfully!"
    echo "Installing base packages..."
    .venv/bin/pip install --upgrade pip setuptools wheel
    echo "Installing requirements..."
    .venv/bin/pip install -r requirements-dev.txt
fi

# Activate the virtual environment
source .venv/bin/activate

# Use with `devservices up objectstore --mode=full`
export BIGTABLE_EMULATOR_HOST=localhost:8086
export RUST_LOG=debug

source_env_if_exists .envrc.private
